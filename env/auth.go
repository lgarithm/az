package env

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"os"
	"path"

	"github.com/golang/glog"
)

// stolenToken is the token generated by azure-cli, i.e. ~/.azure/accessTokens.json
type stolenToken struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ClientID     string `json:"_clientId"`
}

func stoleToken() *stolenToken {
	accessTokenFile := path.Join(os.Getenv("HOME"), ".azure", "accessTokens.json")
	bs, err := ioutil.ReadFile(accessTokenFile)
	if err != nil {
		glog.Exit(err)
	}
	var toks []stolenToken
	if err := json.Unmarshal(bs, &toks); err != nil {
		glog.Exit(err)
	}
	for _, tk := range toks {
		return &tk
	}
	return nil
}

type subscription struct {
	ID       string `json:"id"`
	TenantID string `json:"tenantId"`
}

// azureProfile is the token generated by azure-cli, i.e. ~/.azure/azureProfile.json
type azureProfile struct {
	Subscriptions []subscription `json:"subscriptions"`
}

func loadAzureProfile() *azureProfile {
	filename := path.Join(os.Getenv("HOME"), ".azure", "azureProfile.json")
	var profile azureProfile
	loadJSON(filename, &profile)
	pprint(&profile)
	return &profile
}

func loadJSON(filename string, i interface{}) {
	bs, err := ioutil.ReadFile(filename)
	if err != nil {
		glog.Exit(err)
	}
	if err := json.NewDecoder(bytes.NewBuffer(removeBOM(bs))).Decode(&i); err != nil {
		glog.Exit(err)

	}
}

func removeBOM(bs []byte) []byte {
	return bs // FIXME
	// s := string(bs)
	// return []byte(s)
}

func pprint(i interface{}) {
	e := json.NewEncoder(os.Stdout)
	e.SetIndent("", "    ")
	e.Encode(i)
}
